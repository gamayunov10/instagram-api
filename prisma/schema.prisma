// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider         = "prisma-client-js"
  binaryTargets    = ["native", "linux-musl-openssl-3.0.x"]
  connection_limit = 100000
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                @id @default(uuid())
  accountType           String                @default("Personal") @map("account_type")
  endDateOfSubscription DateTime?             @map("end_date_of_subscription")
  autoRenewal           Boolean               @default(false) @map("auto_renewal")
  isDeleted             Boolean               @default(false) @map("is_deleted")
  email                 String                @unique
  username              String                @unique
  firstName             String?               @map("first_name")
  lastName              String?               @map("last_name")
  birthDate             String?               @map("birth_date")
  city                  String?
  country               String?
  aboutMe               String?               @map("about_me")
  passwordHash          String?               @map("password_hash")
  createdAt             DateTime              @default(now()) @map("created_at")
  isConfirmed           Boolean               @default(false) @map("is_confirmed")
  avatarId              String?               @map("avatar_id")
  avatarURL             String?               @map("avatar_url")
  confirmationCode      ConfirmationCode?
  passwordRecoveryCode  PasswordRecoveryCode?
  posts                 Post[]
  device                DeviceAuthSession[]
  providers             UserProviderInfo[]
  notifications         Notification[]

  @@unique([username, email])
  @@map("user")
}

model UserProviderInfo {
  id             String  @id @default(uuid()) @map("user_provider_info_id")
  provider       String
  userProviderId String  @map("user_provider_id")
  displayName    String? @map("display_name")
  email          String?
  city           String?
  user           User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String? @map("user_id")

  @@map("user_provider_info")
}

model DeviceAuthSession {
  id             String   @id @default(uuid()) @map("device_auth_session_id")
  deviceId       String   @map("device_id")
  ip             String
  title          String
  lastActiveDate DateTime @map("last_active_date")
  expirationDate DateTime @map("expiration_date")
  User           User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String?  @map("user_id")

  @@map("device_auth_session")
}

model ConfirmationCode {
  id               String   @id @default(uuid()) @map("confirmation_code_id")
  confirmationCode String   @unique @map("confirmation_code")
  expirationDate   DateTime @map("expiration_date")
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String   @unique @map("user_id")

  @@map("confirmation_code")
}

model PasswordRecoveryCode {
  id             String   @id @default(uuid()) @map("password_recovery_code_id")
  recoveryCode   String   @unique @map("recovery_code")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  expirationDate DateTime @map("expiration_date")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @map("user_id")

  @@map("password_recovery_code")
}

model Post {
  id          String      @id @default(uuid())
  description String?
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  isDeleted   Boolean     @default(false) @map("is_deleted")
  deletedAt   DateTime?   @map("deleted_at")
  author      User?       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String      @map("author_id")
  images      PostImage[]

  @@map("post")
}

model PostImage {
  id      String  @id @default(uuid())
  imageId String? @map("image_id")
  post    Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId  String  @map("post_id")

  @@map("post_image")
}

model Subscriptions {
  id                   String  @id @default(uuid())
  subscriptionTimeType String  @map("subscription_time_type")
  price                Int
  availability         Boolean

  @@map("subscriptions")
}

model SubscriptionOrder {
  id               String                         @id @default(uuid())
  userId           String
  productId        String                         @map("product_id")
  price            Int
  paymentId        String                         @unique @map("payment_id")
  payment          SubscriptionPaymentTransaction @relation(fields: [paymentId], references: [id])
  subscriptionTime String?                        @map("subscription_time")
  createdAt        DateTime                       @default(now()) @map("created_at")
  updatedAt        DateTime                       @updatedAt @map("updated_at")

  @@map("subscription_order")
}

model SubscriptionPaymentTransaction {
  id                   String             @id @default(uuid())
  price                Int
  paymentSystem        String             @map("payment_system")
  status               String
  url                  String
  openedPaymentData    Json               @map("opened_payment_data")
  confirmedPaymentData Json               @map("confirmed_payment_data")
  createdAt            DateTime           @default(now()) @map("created_at")
  updatedAt            DateTime           @updatedAt @map("updated_at")
  order                SubscriptionOrder?

  @@map("subscription_payment_transaction")
}

model Subscriber {
  id               String    @id @default(uuid())
  userId           String    @map("user_id")
  customerId       String    @map("customer_id")
  subscriptionId   String    @map("subscription_id")
  createdAt        DateTime  @default(now()) @map("created_at")
  subscriptionTime String    @map("subscription_time")
  startDate        DateTime  @map("start_date")
  endDate          DateTime? @map("end_date")
  paymentSystem    String    @map("payment_system")

  @@unique([userId, customerId, subscriptionId])
  @@map("subscriber")
}

model Notification {
  id        String   @id @default(uuid())
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")

  @@map("notification")
}
